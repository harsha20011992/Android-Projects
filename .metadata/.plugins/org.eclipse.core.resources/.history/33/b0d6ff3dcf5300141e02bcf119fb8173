package com.example.sample_fb;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;

import com.facebook.HttpMethod;
import com.facebook.Request;
import com.facebook.Response;
import com.facebook.Session;
import com.facebook.SessionState;
import com.facebook.UiLifecycleHelper;
import com.facebook.model.GraphObject;
import com.facebook.model.GraphUser;

public class MainActivity extends Activity {

	String APP_ID;
	TextView t, flist;
	Button b, friends;
	private UiLifecycleHelper uiHelper;
	private Session.StatusCallback callback;
	static int count = 0;
	static int count1 = 0;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		final Bundle saveinstance = savedInstanceState;
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		APP_ID = getString(R.string.facebook_app_id);
		// final Facebook fb = new Facebook(APP_ID);
		t = (TextView) findViewById(R.id.fbtext);
		//flist = (TextView) findViewById(R.id.fbfriendlist);
		b = (Button) findViewById(R.id.fbbuton);

		//friends = (Button) findViewById(R.id.fbfriends);
		/*friends.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub

				Session.openActiveSession(MainActivity.this, true,
						new Session.StatusCallback() {

							// callback when session changes state
							@Override
							public void call(Session session,
									SessionState state, Exception exception) {
								if (session.isOpened()) {
									Log.d("Test", "Session Open " + count++);
									// make request to the /me API
									new Request(session, "/{friendlist-id}",
											null, HttpMethod.GET,
											new Request.Callback() {
												public void onCompleted(
														Response response) {

													Log.d("Test", "friendlist");
													GraphObject graphObject = response
															.getGraphObject();

													String s = "a";
													if (graphObject != null) {
														JSONObject jsonObject = graphObject
																.getInnerJSONObject();
														try {
															JSONArray array = jsonObject
																	.getJSONArray("data");
															for (int i = 0; i < array
																	.length(); i++) {
																JSONObject object = (JSONObject) array
																		.get(i);
																Log.d("Test",
																		"id = "
																				+ object.get("id"));
																s = s
																		+ object.get(
																				"id")
																				.toString();
															}
														} catch (JSONException e) {

															e.printStackTrace();
														}

														
														flist.setText(s);
													}

												}
											}).executeAsync();
								}

								else {
									Log.d("Test", "session closed" + count++);
									t.setText("Log in to see details");

								}

							}
						});

			}
		});*/

		Log.d("Test", "Beforw Session");
		b.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				Log.d("Test", "clcked" + count++);
				Session.openActiveSession(MainActivity.this, true,
						new Session.StatusCallback() {

							// callback when session changes state
							@Override
							public void call(Session session,
									SessionState state, Exception exception) {
								if (session.isOpened()) {
									Log.d("Test", "Session Open " + count++);
									// make request to the /me API
									Request.newMeRequest(session,
											new Request.GraphUserCallback() {

												// callback after Graph API
												// response with user
												// object
												@Override
												public void onCompleted(
														GraphUser user,
														Response response) {
													if (user != null) {
														t.setText("Hello "
																+ user.getName()
																+ "!");
													}
												}
											}).executeAsync();
								}

								else {
									Log.d("Test", "session closed" + count++);
									t.setText("Log in to see details");

								}

							}
						});

			}
		});
		/*
		 * callback = new Session.StatusCallback() {
		 * 
		 * @Override public void call(Session session, SessionState state,
		 * Exception exception) { onSessionStateChange(session, state,
		 * exception); uiHelper.onCreate(saveinstance); } };
		 */

		// uiHelper = new UiLifecycleHelper(this, callback);

	}

	private void onSessionStateChange(Session session, SessionState state,
			Exception exception) {
		// Only make changes if the activity is visible
		if (state.isOpened()) {
			// If the session state is open:
			// Show the authenticated fragment
			Log.d("Test", "status is open" + count1++);

		} else if (state.isClosed()) {
			// If the session state is closed:
			// Show the login fragment
			Log.d("Test", "status is closed" + count1++);
		}

	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);
		Session.getActiveSession().onActivityResult(this, requestCode,
				resultCode, data);

	}

}
